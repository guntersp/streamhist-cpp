/**
 * StreamHist testing module.
 * Most tests in this module are ported/adapted from the Clojure tests developed
 * for BigMl's "Streaming Histograms for Clojure/Java" [1].
 *
 * References
 * ----------
 * [1] https://github.com/bigmlcom/histogram
 *
 *
 * Copyright © 2015 Carson Farmer <carsonfarmer@gmail.com>
 * Copyright © 2013, 2014, 2015 BigML
 * Licensed under the Apache License, Version 2.0
 */

#include "streamhist/streamhist.h"
#include <catch2/catch.hpp>

#include <fstream>
#include <random>


using namespace streamhist;
using namespace std;


using Hist = streamhist::StreamHist<double>;

inline static std::vector<double> make_uniform(size_t size) noexcept {
    std::default_random_engine             gen;
    std::uniform_real_distribution<double> dis(0., 1.);

    std::vector<double> res;
    res.reserve(size);

    for (size_t i = 0; i < size; i++) {
        res.push_back(dis(gen));
    }

    return res;
}

inline static std::vector<double> make_normal(size_t size, bool fixed = false) noexcept {
    if (size == 10000 && fixed) {
        // this is a series generated by python random generator

#include "test_data2.h"

        return std::vector<double> { data, data + (sizeof(data) / sizeof(data[0])) };
    }

    static std::default_random_engine gen;
    std::normal_distribution<double>  dis(0., 1.);

    std::vector<double> res;
    res.reserve(size);

    for (size_t i = 0; i < size; i++) {
        res.push_back(dis(gen));
    }

    return res;
}

inline static double rand_int(int big) noexcept {
    static std::default_random_engine gen;
    std::uniform_int_distribution<>   dis(0, big);

    return static_cast<double>(dis(gen));
}

inline static bool about(double v1, double v2, double epsilon) noexcept {
    return std::abs(v1 - v2) <= epsilon;
}

inline static bool approx(double a, double b, double rtol = 1e-05, double atol = 1e-08) noexcept {
    return std::abs(a - b) <= (atol + rtol * std::abs(b));
}

template <typename List1, typename List2>
inline static bool allclose(const List1& l1, const List2& l2, double rtol = 1e-05, double atol = 1e-08) noexcept {
    if (l1.size() != l2.size()) {
        return false;
    }

    for (size_t i = 0; i < l1.size(); i++) {
        auto a(l1[i]);
        auto b(l2[i]);

        if (!approx(a, b, rtol, atol)) {
            return false;
        }
    }

    return true;
}

template <typename List1, typename List2>
inline static bool compareBins(List1& l1, List2& l2, double rtol = 1e-05, double atol = 1e-08) noexcept {
    if (l1.size() != l2.size()) {
        return false;
    }

    for (size_t i = 0; i < l1.size(); i++) {
        auto a(l1[i]);
        auto b(l2[i]);

        if (std::abs(a.value - b.value) > (atol + rtol * std::abs(b.value)) || a.count != b.count) {
            return false;
        }
    }

    return true;
}


TEST_CASE("test_update_vs_insert", "StreamhistHistogram") {
    size_t points = 1000;
    auto   data   = make_normal(points);
    Hist   h1(50);
    h1.update(data);
    Hist h2(50);
    for (auto p : data) {
        h2.insert(p, 1);
        h2.trim();
    }
    h2.trim();

    REQUIRE(h1 == h2);
}


TEST_CASE("test_cdf_pdf", "StreamhistHistogram") {
    size_t points = 10000;
    Hist   h;

    auto data = make_normal(points);
    h.update(data);

    REQUIRE(about(h.sum(0), static_cast<double>(points) / 2.0, static_cast<double>(points) / 50.0));
}


TEST_CASE("test_bounds", "StreamhistHistogram") {
    Hist h(8);
    for (size_t i = 0; i < 15; i++) {
        h.update(static_cast<double>(i));
    }

    std::pair<double, double> b1 { 0, 14 };
    REQUIRE(h.bounds() == b1);

    h = Hist {};
    std::pair<double, double> b2;
    REQUIRE(h.bounds() == b2);
}


TEST_CASE("test_count", "StreamhistHistogram") {
    size_t points = 15;
    Hist   h;
    h.update(make_normal(points));

    REQUIRE(h.count() == h.total);
    REQUIRE(h.count() == points);
}


TEST_CASE("test_median_mean", "StreamhistHistogram") {
    size_t points = 10000;
    Hist   h;
    for (auto p : make_uniform(points)) {
        h.update(p);
    }
    REQUIRE(about(h.median(), 0.5, 0.05));


    h = Hist {};
    for (auto p : make_normal(points)) {
        h.update(p);
    }
    REQUIRE(about(h.median(), 0., 0.05));
    REQUIRE(about(h.mean(), 0., 0.05));
}


TEST_CASE("test_exact_median", "StreamhistHistogram") {
    Hist h(17);
    for (size_t i = 0; i < 15; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.median() == 7);


    h = Hist(17);
    for (size_t i = 0; i < 16; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.median() == 7.5);
}


TEST_CASE("test_mean", "StreamhistHistogram") {
    size_t points = 1001;
    Hist   h;
    for (size_t i = 0; i < points; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.mean() == static_cast<double>(points - 1) / 2.0);
}


TEST_CASE("test_var", "StreamhistHistogram") {
    REQUIRE(std::isnan(Hist().update(1.).var()));
    Hist   h;
    double data[] = { 1, 1, 2, 3, 4, 5, 6, 6 };
    for (auto p : data) {
        h.update(p);
    }
    REQUIRE(h.var() == 3.75);
    h = Hist();
    for (auto p : make_normal(10000)) {
        h.update(p);
    }
    REQUIRE(about(h.var(), 1., 0.05));
}


TEST_CASE("test_min_max", "StreamhistHistogram") {
    Hist h;

    REQUIRE(h.min() == std::numeric_limits<double>::max());
    REQUIRE(h.max() == -std::numeric_limits<double>::max());

    for (size_t i = 0; i < 1000; i++) {
        h.update(rand_int(10));
    }

    REQUIRE(h.min() == 0);
    REQUIRE(h.max() == 10);

    Hist h1;
    Hist h2;
    for (size_t i = 0; i < 4; i++) {
        h1.update(static_cast<double>(i));
        h2.update(static_cast<double>(i + 2));
    }
    auto merged = h1.merge(h2);

    REQUIRE(merged.min() == 0);
    REQUIRE(merged.max() == 5);
}


TEST_CASE("test_trim", "StreamhistHistogram") {
    size_t points = 1000;
    Hist   h(10);
    for (size_t i = 0; i < points; i++) {
        h.update(rand_int(10));
    }

    REQUIRE(h.len() == 10);
    REQUIRE(h.total == points);


    h = Hist(10);
    for (size_t i = 0; i < points; i++) {
        h.insert(rand_int(10), 1);
        h.trim();
    }

    REQUIRE(h.len() == 10);
    REQUIRE(h.total == points);
}


TEST_CASE("test_string", "StreamhistHistogram") {
    Hist h(5);
    REQUIRE(h.str() == "Empty histogram");

    for (size_t i = 0; i < 5; i++) {
        h.update(static_cast<double>(i));
    }

    std::string s = "Mean\tCount\n----\t-----\n";
    s += "0\t1\n1\t1\n2\t1\n3\t1\n4\t1";
    s += "\n----\t-----\nMissing values: 0\nTotal count: 5";
    REQUIRE(h.str() == s);
}


/*TEST_CASE("test_round_trip", "StreamhistHistogram") {
    // Tests to_dict and from_dict
    Hist h;
    h.update(1, 1, 4);
    assert h.to_dict() == h.from_dict(h.to_dict()).to_dict();
}*/


TEST_CASE("test_len", "StreamhistHistogram") {
    Hist h(5);
    REQUIRE(h.len() == 0);
    for (size_t i = 0; i < 5; i++) {
        h.update(static_cast<double>(i));
    }

    REQUIRE(h.len() == h.bins.size());
    REQUIRE(h.len() == 5);
    for (size_t i = 0; i < 5; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.len() == h.bins.size());
    REQUIRE(h.len() == 5);
}


TEST_CASE("test_update_total", "StreamhistHistogram") {
    Hist h(5);
    REQUIRE(h.len() == 0);
    for (size_t i = 0; i < 5; i++) {
        h.update(static_cast<double>(i));
    }

    REQUIRE(h.total == h.count());
    REQUIRE(h.total == 5);
    for (size_t i = 0; i < 5; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.total == h.count());
    REQUIRE(h.total == 10);
}


TEST_CASE("test_merge", "StreamhistHistogram") {
    REQUIRE(Hist().merge(Hist()).bins.size() == 0);
    REQUIRE(Hist().merge(Hist().update(double(1))).bins.size() == 1);
    REQUIRE(Hist().update(double(1)).merge(Hist()).bins.size() == 1);

    size_t points = 1000;
    size_t count  = 10;
    Hist   merged;
    for (size_t i = 0; i < count; i++) {
        Hist h;
        for (auto p : make_normal(points)) {
            h.update(p);
        }
        merged.merge(h);
    }
    REQUIRE(about(merged.sum(0), static_cast<double>(points * count) / 2.0, static_cast<double>(points * count) / 50.0));

    Hist h1;
    h1.update(double(1));

    Hist h2;
    h2.update(double(2));
    merged = h1.merge(h2);
    REQUIRE(merged.total == 2);
}


TEST_CASE("test_copy", "StreamhistHistogram") {
    Hist h1;
    auto h2 = h1;  //.copy()
    REQUIRE(h1.bins == h2.bins);
    h1.update(make_normal(1000));
    REQUIRE(!(h1.bins == h2.bins));
    h2 = h1;  //.copy()
    REQUIRE(h1.bins == h2.bins);
    h1 = Hist();
    for (size_t i = 0; i < 4; i++) {
        h1.update(static_cast<double>(i));
    }
    h2 = h1;  //.copy()
    REQUIRE(h1 == h2);
}


TEST_CASE("test_describe", "StreamhistHistogram") {
    size_t points = 10000;
    auto   data   = make_uniform(points);
    Hist   h;
    h.update(data);
    auto d = h.describe(0.5);

    REQUIRE(about(d["50%"], 0.5, 0.05));
    REQUIRE(about(d["min"], 0.0, 0.05));
    REQUIRE(about(d["max"], 1.0, 0.05));
    REQUIRE(about(d["mean"], 0.5, 0.05));
    REQUIRE(about(d["var"], 0.08, 0.05));
    REQUIRE(d["count"] == static_cast<double>(points));
}


TEST_CASE("test_compute_breaks", "StreamhistHistogram") {
    size_t points = 10000;
    size_t bins   = 25;
    // from numpy import histogram, allclose
    auto data = make_normal(points, true /*there is no numpy, so we can not compare it against real random*/);
    Hist h1;
    h1.update(data);

    // precalculated numpy results
    std::vector<double> h2  = { 1, 3, 8, 23, 49, 89, 197, 350, 495, 761, 1006, 1179, 1285, 1214, 1036, 830, 592, 407, 244, 122, 66, 23, 14, 4, 2 };
    std::vector<double> es2 = { -3.99361755, -3.67891995, -3.36422234, -3.04952474, -2.73482714, -2.42012953, -2.10543193, -1.79073433, -1.47603672,
                                -1.16133912, -0.84664152, -0.53194391, -0.21724631, 0.09745129,  0.41214889,  0.7268465,   1.0415441,   1.3562417,
                                1.67093931,  1.98563691,  2.30033451,  2.61503212,  2.92972972,  3.24442732,  3.55912493,  3.87382253 };

    auto  b(h1.compute_breaks(bins));
    auto& h3(b.counts);
    auto& es3(b.bounds);

    // h1.print_breaks(bins);

    REQUIRE(allclose(es2, es3));
    REQUIRE(allclose(h2, h3, 1., static_cast<double>(points) / static_cast<double>(bins * bins)));
}


TEST_CASE("test_sum", "StreamhistHistogram") {
    size_t points = 10000;
    Hist   h;
    auto   data = make_normal(points);
    h.update(data);
    REQUIRE(about(h.sum(0), static_cast<double>(points) / 2.0, static_cast<double>(points) / 50.0));
}


TEST_CASE("test_paper_example", "StreamhistHistogram") {
    /// Test Appendix A example from Ben-Haim paper.
    Hist h(5);
    h.updateValues(23., 19., 10., 16., 36., 2., 9.);

    std::vector<Hist::Bin> bins1 = { { 2, 1 }, { 9.5, 2 }, { 17.5, 2 }, { 23, 1 }, { 36, 1 } };
    REQUIRE(compareBins(h.bins, bins1));

    Hist h2(5);
    h2.updateValues(32., 30., 45.);
    auto                   h3    = h + h2;
    std::vector<Hist::Bin> bins2 = { { 2, 1 }, { 9.5, 2 }, { 19.33, 3 }, { 32.67, 3 }, { 45, 1 } };
    REQUIRE(compareBins(h3.bins, bins2, 1e-3));
    REQUIRE(about(h3.sum(15), 3.275, 1e-3));
}


TEST_CASE("test_sum_first_half_of_first_bin", "StreamhistHistogram") {
    // test sum at point between min and first bin value
    // https://github.com/carsonfarmer/streamhist/issues/13
    Hist h(5);
    h.updateValues(1., 2., 3., 4., 5., .5);
    REQUIRE(h.min() == 0.5);

    auto& bin0(h.bins[0]);
    REQUIRE(bin0.value == 0.75);
    REQUIRE(bin0.count == 2);
    REQUIRE(h.sum(h.min()) == 0.);
    REQUIRE(h.sum((h.min() + bin0.value) / 2.) == std::pow(.5, 2) * static_cast<double>(bin0.count) / 2.);
}


TEST_CASE("test_quantiles", "StreamhistHistogram") {
    size_t points = 10000;
    Hist   h;
    for (auto p : make_uniform(points)) {
        h.update(p);
    }
    REQUIRE(about(h.quantiles(0.5).front(), 0.5, 0.05));

    h = Hist();
    for (auto p : make_normal(points)) {
        h.update(p);
    }
    auto qs(h.quantiles(0.25, 0.5, 0.75));
    REQUIRE(about(qs[0], -0.66, 0.05));
    REQUIRE(about(qs[1], 0.00, 0.05));
    REQUIRE(about(qs[2], 0.66, 0.05));
}


TEST_CASE("test_histogram_exact", "StreamhistHistogram") {
    /// A StreamHist which is not at capacity matches numpy statistics

    size_t max_bins = 50;
    // points = [random.expovariate(1/5) for _ in range(max_bins)]

    // precalculated points to resemble python random
    double points[] = { 5.7936249651597365, 0.8295770778768136, 3.5200599010680156,   4.941832643180066,   1.5317865626385465,  1.4944577673640593,
                        4.256907358080107,  10.191773776688349, 6.574690509729635,    3.9889207660985324,  0.858782166235077,   3.455411281850057,
                        4.3312431648448575, 1.383537881388759,  5.566457353565675,    5.949826401828498,   2.7813903845823993,  8.21275517639662,
                        4.098600245671531,  12.782923861177299, 2.927444575380914,    11.533337402729186,  0.01926511040640428, 1.662139080105632,
                        9.282946530595556,  6.183325159257773,  2.08945665245024,     5.07700175971408,    0.6367083157433159,  7.893650803112627,
                        7.685161406742824,  3.3533673774301924, 18.560201453160257,   0.8285544048635912,  0.08430942688268808, 5.721215020943999,
                        0.7061792097834503, 0.9522554455823451, 0.019899437321356923, 9.052709612234429,   0.46274099989972217, 13.930915122534172,
                        13.610813831467455, 2.7634331066763616, 1.271785623270984,    0.17589643865995835, 7.685556407245329,   13.306142803085192,
                        4.383213888589659,  25.090889203509555 };
    Hist   h(max_bins);
    h.update(points);


    std::vector<double> q;
    q.resize(101);
    for (size_t i = 0; i < 101; i++) {
        q[i] = static_cast<double>(i) / 100.;
    }

    // precalculated quantilies as there is no numpy
    std::vector<double> qs
        = { 1.92651104e-02, 1.95759306e-02, 1.98867508e-02, 5.01721324e-02, 8.17330273e-02, 1.25523582e-01, 1.70401218e-01, 2.99239600e-01,
            4.39793435e-01, 5.34067599e-01, 6.19311584e-01, 6.63801964e-01, 6.97842702e-01, 7.51458032e-01, 8.11421878e-01, 8.28912340e-01,
            8.29413450e-01, 8.39214757e-01, 8.53525250e-01, 8.87758883e-01, 9.33560790e-01, 1.04491920e+00, 1.20148898e+00, 1.30195873e+00,
            1.35671734e+00, 1.41126785e+00, 1.46561860e+00, 1.50304339e+00, 1.52133450e+00, 1.55916059e+00, 1.62303332e+00, 1.74332942e+00,
            1.95271503e+00, 2.20403265e+00, 2.53428111e+00, 2.76612670e+00, 2.77492576e+00, 2.80037743e+00, 2.87194398e+00, 2.97429608e+00,
            3.18299826e+00, 3.36255133e+00, 3.41255284e+00, 3.45993669e+00, 3.49161451e+00, 3.54350294e+00, 3.77324477e+00, 3.99221115e+00,
            4.04595410e+00, 4.10018332e+00, 4.17775380e+00, 4.25532429e+00, 4.29258855e+00, 4.32901309e+00, 4.35514970e+00, 4.38061535e+00,
            4.62900614e+00, 4.90272933e+00, 4.99860367e+00, 5.06483654e+00, 5.27278400e+00, 5.51261724e+00, 5.62526527e+00, 5.70109652e+00,
            5.74728260e+00, 5.78276347e+00, 5.84673345e+00, 5.92327216e+00, 6.02454600e+00, 6.13896040e+00, 6.30073476e+00, 6.49250379e+00,
            6.88562236e+00, 7.42975310e+00, 7.68526411e+00, 7.68545766e+00, 7.73549906e+00, 7.83746532e+00, 7.96385377e+00, 8.12021491e+00,
            8.38074606e+00, 8.79232374e+00, 9.09415226e+00, 9.20696835e+00, 9.42835889e+00, 9.87368424e+00, 1.03795927e+01, 1.10369589e+01,
            1.16832878e+01, 1.22955851e+01, 1.28352458e+01, 1.30916230e+01, 1.33305165e+01, 1.34798053e+01, 1.36300199e+01, 1.37868695e+01,
            1.41160866e+01, 1.63844369e+01, 1.86908152e+01, 2.18908522e+01, 2.50908892e+01 };


    REQUIRE(allclose(h.quantiles(q), qs, 1e-6, 1e-12));
    REQUIRE(approx(h.mean(), 5.389901497096077, 1e-6, 1e-12));
    REQUIRE(approx(h.var(), 26.524925740327195, 1e-6, 1e-12));
    REQUIRE(approx(h.min(), 1.92651104e-02, 1e-6, 1e-12));
    REQUIRE(approx(h.max(), 2.50908892e+01, 1e-6, 1e-12));
    REQUIRE(h.count() == max_bins);
}


TEST_CASE("test_histogram_approx", "StreamhistHistogram") {
    /// Test accuracy of StreamHist over capacity, especially quantiles.


    struct Data {
        size_t max_bins       = 0;
        size_t num_points     = 0;
        double expected_error = 0.;

        std::vector<double> points;
        std::vector<double> q1;
        std::vector<double> q2;
        std::vector<double> q3;

        double mean = 0.;
        double var  = 0.;
        double min  = 0.;
        double max  = 0.;
    };

    // precalculated points to resemble python random

    std::vector<double> points_1000
        = { 4.4401015163448045,   0.07606840079569868,  3.417978329395581,    13.142292351109749,   3.924113823828846,    31.069174711545504,
            0.3949049631592633,   0.18745028079224532,  2.9691525937421717,   2.178328138778495,    0.845955851660304,    7.545457456720482,
            17.134380054784973,   11.941985414477054,   0.88420789083267,     4.754311984863151,    1.241165617612236,    11.620460705979042,
            2.2908337080465953,   25.680469458718978,   3.1599106411897973,   5.899451580167843,    3.525157238330028,    1.6728675480594515,
            4.950220007637336,    4.731008374523998,    2.1656756865561815,   5.025342542100694,    1.297374250510748,    8.10014060615679,
            0.4117373324379828,   0.11413598102831969,  1.5016091075980544,   7.431704307525142,    5.307004696307662,    12.708345978968664,
            3.1091461173981036,   14.247591150001218,   5.880344201371271,    1.1598950440863898,   0.5985343804232156,   7.579782860532556,
            6.2559172122597015,   0.047989048080874355, 2.6562893138313126,   2.5577582745358476,   3.849907983293793,    2.612015327360161,
            2.6286687674205793,   10.906602530680031,   12.461851065883613,   0.19967123309904036,  3.8687217527988103,   1.8466097695301298,
            2.161973768051934,    26.922819007156694,   0.8931896299672567,   8.811270096826302,    16.92278037364014,    2.959175517418516,
            7.075576691936243,    6.8012648062220125,   10.269724663841785,   1.2288310681449457,   9.484453303112527,    1.740935364889255,
            11.284553948571897,   5.588231997945333,    0.2904320341853811,   15.969095836540536,   3.003654243568176,    3.009705227647459,
            7.873739090716105,    1.2929585016757774,   6.620403332258107,    1.1350647445687418,   3.9996223030385307,   5.813584602484268,
            8.117647414785296,    2.3784017625739264,   1.2239847285000909,   12.245139672593723,   2.288569515857697,    0.012492698576990566,
            2.048844093709316,    4.005423633551367,    0.011340529885709466, 0.7147895137907454,   1.3121359540662092,   9.564168997903245,
            3.327037813155451,    0.3592321493347301,   0.5516507420468453,   5.694135930235633,    9.205755712664976,    2.5311855644627395,
            3.7803148403994156,   14.996367063025923,   16.09856690156523,    0.70981082976829,     3.496863476928161,    2.7280004114556813,
            3.8904995373365145,   2.317000538435488,    2.7592885605129536,   0.7081743314764334,   1.2600105841492664,   1.2311311524635153,
            4.183664466116066,    0.74906853491363,     12.125450544441447,   8.203377128466931,    9.883102201978136,    0.18095773046190472,
            5.845323425670743,    8.505437820442125,    1.2989891331536312,   1.065039903142391,    6.6914312656015635,   3.7411392095134457,
            5.404381566235117,    4.137045273591047,    6.214119202071524,    15.1114338145889,     4.342571476181631,    0.06181342514680109,
            1.979091515873023,    0.5863128770560228,   3.2655884673183344,   1.967813175322703,    1.5339582174713484,   9.766012006813835,
            0.31567251129748036,  17.075503153543288,   7.677839045197306,    4.098431037346042,    1.0871736731628094,   13.455016714919143,
            0.03568635509958597,  0.3948958207803832,   6.890803253124211,    5.768372752330715,    0.7718283121826817,   10.197170373460633,
            1.752181756455129,    4.388457585969179,    6.259809690491772,    6.063833965425592,    2.080523757722078,    2.343983424967255,
            1.531983608415434,    0.36633694783324416,  2.4308513072560163,   5.1805556399166,      2.5026130365792967,   3.037709360744598,
            9.406137353095685,    5.042112186838355,    7.286572760670211,    1.925015192182477,    4.409900513524715,    3.8039943550833475,
            0.6364641082383244,   6.550504972793725,    5.069048170545322,    0.9396563233021508,   10.565261508853542,   3.2771371340230404,
            0.33454872368975624,  1.9361342437431999,   13.066026678936403,   8.308691353726037,    0.3966649289015914,   10.162312668221714,
            0.023615276308623014, 6.682159432388786,    3.356311268693463,    0.9706824903955499,   20.72975122670852,    9.718161280965464,
            3.4532473235397574,   2.596895236918926,    8.020388086196704,    6.148456683262837,    3.411334869761803,    8.01616897436055,
            9.070899354655774,    0.7188595262502581,   10.963213399854101,   0.30216027878936136,  1.0440619984425632,   0.2935011253361686,
            0.8941281002108149,   9.471816491497865,    8.49227341788692,     3.857852777847347,    5.868946530109049,    6.062133628431716,
            3.9797789377716066,   0.4318874116927125,   4.333990069768513,    0.03597891749546034,  10.093760847530584,   8.07090669569375,
            10.011470163272413,   0.2914497529026546,   1.6392819740829445,   8.46680583019783,     0.8870482557084892,   3.956157877578459,
            9.596945212615827,    1.0520505282347312,   9.179608856703302,    15.917110410461685,   6.680213799227184,    9.468238332392568,
            1.0314849300205957,   3.935269989853519,    1.219681009782349,    9.419546575044203,    2.000372481539255,    15.140025935838148,
            1.8421118241304018,   1.5782581906406037,   0.20590035873807258,  19.43494944375575,    7.527976713631242,    1.8206599503034722,
            4.9102789484401965,   4.661027409167442,    0.442970704614009,    11.207465999064455,   10.09987415547001,    7.9853225333835836,
            1.9353616536517495,   7.663051856750178,    1.9878229082273435,   3.423344568402052,    0.3747728211021579,   12.937678730580686,
            13.199933788631983,   2.043215826574626,    3.26125722720954,     1.4628875499659093,   7.28728801046934,     11.025569771451648,
            2.1440621728090683,   13.735402978534879,   7.541276901421877,    2.453671470762143,    0.040047507038757764, 10.211665227494493,
            0.40661310708354304,  0.04881603508146978,  2.3832798716451826,   3.6456244922650436,   9.37582495165587,     4.254445293716067,
            2.7154506450423335,   3.8431488097828845,   0.17867971016777107,  2.0454898596372098,   16.28812977108946,    3.6517983742757556,
            9.21083291704938,     6.51441490070885,     8.069002932025583,    0.7966700929110578,   2.7884046921746486,   4.445542992716589,
            1.9106189051473257,   2.016649546237074,    0.7669592836246761,   1.1509253719352617,   4.703950368016349,    2.2799738551441595,
            2.0706637966386174,   2.1382591563538167,   12.33981748753477,    2.4188311681316232,   3.2436085922946343,   10.526361600283309,
            0.6243355041649682,   7.127467521551668,    17.32924397921251,    20.386475766728385,   2.468710321085502,    7.919843401949045,
            0.758340784494866,    4.609205150237943,    6.1861711146156315,   5.19267847606357,     6.92370715689369,     18.81599711737324,
            7.2528343761637215,   0.05031752238318012,  4.278051813717307,    1.4027821831364502,   2.835660612870894,    5.957950505701467,
            2.3790200914579076,   8.399953401023668,    12.489375497165993,   3.739157861653864,    9.424484767613334,    1.1358304872713736,
            0.39679210010994737,  0.8850108239478056,   3.433295471702593,    8.754569121609814,    5.440236740724794,    0.16027998994956189,
            5.744691658120305,    4.244006023732164,    6.365468847635376,    8.083680657031364,    0.11820798812117159,  2.1430220089484715,
            8.93756641664408,     0.5359379127943711,   4.710057771611881,    2.381659129786454,    2.0515134868511353,   3.6183067539239833,
            2.5458414728799994,   0.1294195459205963,   3.3485239599418746,   5.90941207302469,     17.908812686477656,   8.152918579154692,
            6.449596561923984,    1.6947847766580337,   4.309475410564787,    13.262566430248697,   9.289285312189458,    3.3918630297711148,
            3.015473809992121,    4.114129236169874,    13.212614352951528,   1.4793657874746982,   3.7324584781413384,   1.8133400112593616,
            2.959130890479798,    11.272616587688663,   0.032253218032584755, 4.177324928347556,    0.5385704080509331,   1.5383582833336376,
            8.710924318915687,    3.323378584489405,    0.7937821154482428,   3.84589685568249,     26.165012228708537,   1.6884516165697279,
            2.048368178476725,    7.159227873402103,    10.829748836953682,   8.926570614271396,    5.56187189655146,     4.25300990654048,
            1.3094846308535346,   1.8571589351654405,   15.984255062346605,   3.930012249502263,    13.29333558893674,    1.1629801659641597,
            2.6998699087988878,   6.708084187309412,    3.6021032103843664,   1.7476230103919235,   2.7881392795884365,   4.748039426514309,
            1.7066858556919453,   8.544040473890796,    8.610211647650873,    0.5871188028414529,   1.0898489283035229,   6.309614621285788,
            6.979642689923353,    0.5923654274739218,   4.732322735472485,    11.30050733035084,    5.908868327735457,    0.8604445053118629,
            9.859298666190233,    20.00429897039145,    7.472502452154628,    1.2985995523116518,   7.268713592788903,    1.6172974228238242,
            4.860117340322305,    1.4909514207172252,   1.124683060835706,    2.443559578062046,    3.774892621600586,    10.898146623869698,
            0.8520976979437606,   4.348992738403556,    7.216661811362759,    4.312237851733287,    4.886221329201592,    1.6568396933100606,
            8.52367961475927,     0.7970458569154365,   0.11444979780004542,  3.0484789767455087,   0.8818001347840682,   0.6111096354150395,
            0.18055524736880496,  4.214429459053656,    0.5341889290043305,   0.5920964046273849,   2.5761432077866897,   2.428502008870171,
            0.001651669923338533, 2.7294547432928615,   5.859238481463503,    9.578005990558795,    21.411920156835738,   1.8225460496152934,
            0.14543657432621324,  2.827796899902648,    3.3219190166684065,   8.376277085232115,    0.36781384622579716,  7.075368540949212,
            3.0128686916310534,   1.795823410193896,    1.472912945285955,    4.464583327999276,    1.388478629032328,    7.276251350904329,
            2.6129459658633114,   11.544637242083606,   3.7269477085417226,   11.47472976585624,    2.5514022337845796,   3.257441501570605,
            0.38005403020360157,  4.044076022816997,    0.7995445369181656,   1.3028288026569328,   0.08365726387092942,  1.9351618326539084,
            5.908968488796192,    1.106754817893369,    0.6991842092202116,   4.512202976147198,    0.693247591788967,    11.350683047748007,
            9.96948837763243,     1.9745482994983925,   0.15960846922728164,  1.6129675366360967,   21.202437013812137,   0.2498325129982,
            5.907021338884344,    15.730631345083971,   4.05750984320008,     0.30752798988986835,  1.5095598714275196,   3.591186761037468,
            2.0484553391280214,   0.7585008253936681,   0.16548186879397134,  5.629394785815234,    8.093292318274134,    2.0703587805744115,
            3.28328679212508,     4.294565728269018,    0.7430370066982014,   0.9580361401454115,   5.738551658410161,    1.6984161331405856,
            13.215373858757475,   3.8606632181474696,   1.6163161272334325,   11.154484680104781,   1.248981122142464,    1.30742531991196,
            1.3902059476344286,   0.387693339266544,    1.064932207491119,    6.176182164670757,    0.3324987403054669,   4.904028691368601,
            8.090142545931286,    6.655473343068336,    25.66206351742774,    5.388877262947447,    1.5941560324771114,   12.093667792122357,
            0.5623924354381349,   1.1620705509193776,   4.008842073661113,    0.6943101638544775,   1.672965615726838,    15.060799521982261,
            2.46043963144609,     5.294810961439041,    15.195126227054345,   0.994292097783189,    4.630579778377211,    1.9432586317224465,
            4.308213278931057,    0.8966888952157162,   7.27869664299266,     12.82256844446104,    7.713811025852735,    2.888151889709219,
            5.621971911482224,    5.352409763794337,    0.9898008430482504,   1.145483869579249,    0.18574722380719572,  1.9051263276516408,
            1.639902420278462,    6.7442941453591025,   17.402552514479826,   4.694340135007291,    2.8466403701295797,   0.76261444315634,
            3.759351331659569,    7.403582095938473,    3.1893585272204183,   1.1212026333957965,   4.235051852800263,    2.8538462394052133,
            6.464517708244275,    14.723614231287735,   10.02193150917814,    0.6019254221808046,   1.902932926774888,    0.7694075864138037,
            0.10698264295112102,  3.361318232788975,    6.22864423679853,     0.27777807539069904,  0.5786281451024315,   7.710850324224801,
            3.090797931042466,    29.595551270644698,   2.7825126121182047,   3.0910842836528727,   0.4519657122121679,   4.1672784840006205,
            2.2664790678724747,   2.8671158270963324,   2.77097773955241,     0.4480540386421192,   6.941482450080285,    10.863386219947907,
            2.0322954999823684,   2.596074816281234,    7.806791516530717,    1.2133442954034703,   15.711264705250501,   3.992638617174741,
            2.7929653162488663,   9.5468959074221,      1.4146296117180348,   5.937566260436887,    4.181935975822711,    15.194940348515779,
            1.085588258301314,    6.807783143368465,    0.4468758467423639,   20.63991124334846,    2.7155075953219145,   3.244956747648032,
            0.25954973227405137,  2.5048538077737272,   4.1599356040663915,   1.965379025369441,    8.651037881346811,    1.832954802751378,
            1.5274117808478682,   12.01246708305564,    2.5100394941364814,   7.030951446937312,    7.6649765335279305,   3.2478224285442945,
            8.031254151766042,    5.785594780450158,    5.433929428169413,    2.6275680783020774,   0.7562731793549685,   0.334115729871741,
            7.024910849503222,    1.9830216845566797,   0.45983591985560596,  0.06376393776230448,  11.610139688276632,   2.799494588999139,
            0.4389245698853595,   14.636247647610817,   1.0110225932517862,   4.663230280151402,    4.803632240282405,    10.564450558807525,
            0.12380166255076654,  1.7206211801984377,   3.9101726896187197,   0.23869172318145035,  6.9727620283179546,   4.8257277745397795,
            6.848576827762269,    15.037505674036202,   1.6450356176137095,   0.38717924470174736,  8.07865728886339,     3.315971755148453,
            0.07179065008589067,  12.553300847460443,   22.315734585476754,   4.256147124126172,    4.294086114748437,    0.23796671049109905,
            2.6126998998519904,   6.1664961143439845,   1.2676083840199994,   1.934281705552893,    0.1422063614985898,   0.5807558465882992,
            17.215334295190214,   2.619169451365783,    3.7829048785784356,   2.4123263250387614,   8.675066774116747,    0.026269385110621466,
            9.301815096265972,    0.3186954255736077,   2.843668077328717,    1.228903789930563,    0.32232809136808205,  0.5014822486455225,
            0.8502696493138351,   4.9696027808333,      4.195641469008744,    2.3333790777899734,   5.936560757274024,    0.36186404886475737,
            0.3046709698157848,   12.31356864664635,    4.875271315591566,    0.18552243261119908,  0.7129841431332057,   1.881716244187686,
            0.28800818802598854,  3.9978318927540815,   1.4734481274139049,   1.9504473657126133,   4.547159359712259,    0.9528060146177939,
            14.726346076259436,   3.974883069883878,    11.020828108539728,   1.0913915515294064,   0.3957222262118069,   13.217700885679921,
            1.265762314354198,    1.3968653417706882,   2.1992170709547767,   10.378000901221268,   9.884966585399296,    10.618117199060778,
            0.553622230016351,    1.92869833923629,     7.292603979503749,    11.078512316877866,   7.283922142154318,    8.25289112738163,
            5.952749979831392,    0.10596185491761533,  1.5300381014908422,   10.748642673762182,   6.368002754423914,    0.04797521798972017,
            0.4014069562344212,   0.9478391660541386,   4.159573318971501,    4.302633100458427,    5.987057845976438,    9.12738711769681,
            5.305103800790823,    1.326988413009921,    7.416613377465852,    11.056523768349537,   3.8247910932744653,   1.908806493096718,
            4.771866500077661,    15.923971348533037,   0.3954372079199944,   18.83302719064202,    1.65535244337931,     3.361915916775125,
            2.479803946655368,    5.817502767482794,    6.301599786457524,    0.8307774409170016,   16.394077484484068,   0.9492032107772661,
            3.214338911995457,    6.918521214290552,    0.11689579665655349,  7.288482942188278,    9.678482058942977,    0.10038394956941844,
            0.929522606598516,    4.029549883801417,    8.249621159181276,    4.048434638493948,    2.84500311531073,     11.84496926424874,
            5.546117088384968,    16.894112289211147,   17.74812511914316,    11.416388343221437,   4.361510941643972,    7.437942206581406,
            14.630202888776456,   4.793474808637899,    1.0750562230071785,   0.6891098464507269,   3.4782672752618202,   13.35771674613872,
            1.5633055583828719,   4.470382523379135,    2.4414431024439587,   1.1042337731887928,   2.2328303518056916,   0.3003147390267135,
            4.876668351209175,    1.3197973967802938,   7.23293147785292,     6.460370402669448,    1.420480050764015,    6.925842744581963,
            12.773185496595994,   6.271152249200183,    9.779405308553647,    1.9300092993475486,   6.134545062525066,    1.2071250699401688,
            4.018993092709618,    5.019919635054857,    1.356748697176155,    4.057566228868343,    10.286224209053646,   1.6391010282150498,
            4.236238709895485,    12.311412023524275,   3.0898608166994137,   15.593918086271795,   0.773000501240829,    6.018481738239833,
            6.739982105542741,    4.383118008537148,    0.24089395109746953,  8.635103605025494,    3.922112653764809,    0.918218934859627,
            1.1872816946566562,   0.1833670039028721,   0.8995750249805695,   5.940512889225828,    3.0636941657625387,   7.19683458958966,
            12.843038988285818,   1.3985527523933723,   0.6974848107595762,   1.2748248140358036,   0.793250583593749,    0.1454277896800294,
            5.691023532609572,    2.968943973310812,    1.7087204118353356,   0.07023739384441398,  1.724979716955405,    0.978198649712398,
            0.5630647260431116,   5.746284529327329,    0.2065901383988742,   0.9698437489317969,   3.8575838241746654,   4.37973612827926,
            1.9652685756328347,   11.724014900679611,   16.444800146846877,   4.229734768853002,    17.87566598840743,    0.3583176970791821,
            2.5325113715149126,   1.9725653621800883,   7.8837986383843095,   5.801772741532615,    3.7419556719327196,   8.09918261117542,
            4.192793048935142,    0.28267457524044537,  0.9243481795187417,   0.24257850214957724,  8.311646671815028,    0.7030253235511708,
            14.613343364225774,   9.084634938482147,    0.14495458512099135,  1.8176585644312553,   6.592501285907768,    8.292642285643641,
            7.439298259645438,    0.5409076401040841,   3.00867653139035,     10.285972966388927,   5.541054371592911,    1.67881722007719,
            3.5871513025794233,   0.45720054284002304,  6.886773490442014,    0.24593595958413103,  4.977966975783305,    8.372415847091036,
            1.5640308199095114,   3.8392683279254394,   0.8795455173979551,   4.861297278856341,    1.5179692702027408,   4.252576739857033,
            0.13529707560599297,  0.7170675489646435,   3.8956109754919197,   1.205127435897686,    4.265082408999519,    1.1595594158617442,
            4.5195200053313895,   0.6363443191528226,   1.471962594947478,    1.966039543095505,    4.930320604276098,    0.24826341311213046,
            1.479029076774189,    3.274005489855299,    9.986621374349424,    6.428545765344476,    1.5975339684688235,   5.393217153958536,
            0.490200858048557,    0.02020959395408191,  1.3209790968825381,   5.534559696481447,    9.255880912110216,    0.655283210832216,
            0.8028777025852349,   1.5264745253880556,   21.997971025190875,   0.29675127169821813,  20.65548251417906,    1.3099841478025533,
            1.4803763248906194,   3.017291134100465,    7.421165435228439,    3.5120833539259526,   2.738106134335232,    6.470783029955265,
            0.5800912409681976,   4.003033203297689,    1.160884065642499,    1.9495636156054381,   1.5873400604294046,   4.733473119335734,
            4.273198361665224,    7.402244529327199,    0.7095826413647411,   1.4218373887733244,   4.687533866659612,    8.327971174426171,
            3.6270201969306846,   6.711586366596218,    7.587825913587863,    2.779256178737584,    6.425241612590577,    1.2976473202541785,
            4.739139379948892,    6.862495390805301,    0.3178584599595094,   1.290207508373951,    11.700858993979237,   2.144575707400772,
            0.6303127672961825,   0.20679336837539794,  15.466008018379009,   25.126987283800062,   4.562596124087965,    15.171614108492175,
            1.3955231860848374,   0.171212327818168,    3.4216657385215625,   1.04637642870535,     6.334323526431909,    0.5184641758899471,
            19.435848172460265,   4.323239475968775,    4.223334533690448,    0.3325049256244501,   9.567220899601587,    8.68593341106693,
            8.396261446090584,    5.118693002177667,    7.439672485938764,    15.816327375454287,   4.878896682988613,    0.8057748547462462,
            23.72100999303478,    5.631885656401345,    0.641978712510545,    3.552807271239671,    0.8133357259311587,   5.6719857645097465,
            7.1113442823806565,   0.9934031482029985,   7.305597948757005,    0.4532164691485311,   2.456134203923138,    3.2971639088494857,
            10.808965953806995,   1.0974496525106283,   25.89228683376947,    2.1551371566364486,   3.2673075632091173,   7.865265891354207,
            19.615724121527467,   3.19978327757916,     7.461346572385595,    3.744228061034917,    2.644990270394945,    1.819614915403659,
            0.9459658826467707,   3.498205108189436,    7.7106587098092305,   3.5266873922919992,   4.609074096929305,    1.9786557605725363,
            4.5324847772694525,   1.1872022590665319,   3.729398010301897,    0.053124177581383755, 0.35761365790313526,  11.701232669732713,
            1.3572494831617954,   11.945044742721453,   1.663948224861815,    2.6977608515686384,   17.3308204706948,     6.462445903663947,
            3.4151493425379864,   2.717308349561008,    4.115527119970255,    21.93576907393039,    2.6255896519197663,   5.995110449379066,
            2.6396923825476164,   6.942525687999016,    3.7467874547513267,   0.2665277097461186,   0.5279452147518829,   6.30746653883009,
            7.590893759219123,    2.7408994764798233,   11.189866440717035,   2.8345998135430697,   0.6588209627600708,   4.633470712882374,
            12.775617220391952,   1.0006358290597772,   9.97282259311293,     3.818414967351892,    10.977124854427942,   0.2346195165597049,
            5.2196916025499815,   1.127804647605027,    4.252624034882045,    1.8172525917428233,   1.9673775987688462,   4.311444954666039,
            9.081983570604647,    3.770214839140844,    5.784824367122537,    6.985396341523114,    1.4320368081134738,   3.3011012231808983,
            2.0650754784560843,   1.9008958691701565,   5.404289107035742,    4.303568916699702,    5.243129186823095,    1.7488240707954696,
            3.7417799513470142,   0.8493936743412165,   8.384564315322796,    2.3012096792545544 };


    std::vector<double> q1_1000
        = { 1.65166992e-03, 4.78959409e-02, 8.35054866e-02, 1.35120750e-01, 1.80480226e-01, 2.33228209e-01, 2.77103053e-01, 3.07327998e-01,
            3.58261374e-01, 3.94904140e-01, 4.42566091e-01, 5.26902300e-01, 5.79915669e-01, 6.29535723e-01, 6.98946293e-01, 7.48163806e-01,
            7.93697070e-01, 8.50120734e-01, 8.96227952e-01, 9.57042416e-01, 1.04154658e+00, 1.09617745e+00, 1.15765993e+00, 1.21822357e+00,
            1.27309287e+00, 1.30985927e+00, 1.39651638e+00, 1.47330363e+00, 1.52930273e+00, 1.60849180e+00, 1.67019175e+00, 1.73598911e+00,
            1.82194250e+00, 1.91002081e+00, 1.95014689e+00, 1.98164613e+00, 2.05055251e+00, 2.15944422e+00, 2.31100001e+00, 2.42993508e+00,
            2.50796522e+00, 2.61241923e+00, 2.69898410e+00, 2.77569645e+00, 2.84441570e+00, 3.00641650e+00, 3.09095256e+00, 3.25946384e+00,
            3.32267799e+00, 3.41985891e+00, 3.53974733e+00, 3.73089764e+00, 3.77749529e+00, 3.85771023e+00, 3.94487842e+00, 4.02374365e+00,
            4.15973272e+00, 4.23202111e+00, 4.27523681e+00, 4.32764722e+00, 4.45315913e+00, 4.63170724e+00, 4.73562630e+00, 4.87578822e+00,
            5.02187188e+00, 5.30576911e+00, 5.54277570e+00, 5.74057786e+00, 5.86234506e+00, 5.94430639e+00, 6.16940193e+00, 6.31678020e+00,
            6.48299995e+00, 6.71925322e+00, 6.92426241e+00, 7.08451859e+00, 7.27995076e+00, 7.42358938e+00, 7.58155233e+00, 7.86704526e+00,
            8.07966196e+00, 8.26044385e+00, 8.47139000e+00, 8.71834394e+00, 9.20656807e+00, 9.47371201e+00, 9.79059038e+00, 1.01079912e+01,
            1.05716042e+01, 1.10213497e+01, 1.13572536e+01, 1.19422608e+01, 1.24944895e+01, 1.32008214e+01, 1.46143549e+01, 1.51727804e+01,
            1.59697022e+01, 1.72187516e+01, 1.94394457e+01, 2.20011487e+01, 3.10691747e+01 };

    std::vector<double> q2_1000
        = { 1.65166992e-03, 1.65166992e-03, 1.65166992e-03, 1.65166992e-03, 1.65166992e-03, 1.65166992e-03, 1.65166992e-03, 1.65166992e-03,
            4.78959409e-02, 8.35054866e-02, 1.35120750e-01, 1.80480226e-01, 2.33228209e-01, 2.77103053e-01, 3.07327998e-01, 3.58261374e-01,
            3.94904140e-01, 4.42566091e-01, 5.26902300e-01, 5.79915669e-01, 6.29535723e-01, 6.98946293e-01, 7.48163806e-01, 7.93697070e-01,
            8.50120734e-01, 8.96227952e-01, 9.57042416e-01, 1.04154658e+00, 1.09617745e+00, 1.15765993e+00, 1.21822357e+00, 1.27309287e+00,
            1.30985927e+00, 1.39651638e+00, 1.47330363e+00, 1.52930273e+00, 1.60849180e+00, 1.67019175e+00, 1.73598911e+00, 1.82194250e+00,
            1.91002081e+00, 1.95014689e+00, 1.98164613e+00, 2.05055251e+00, 2.15944422e+00, 2.31100001e+00, 2.42993508e+00, 2.50796522e+00,
            2.61241923e+00, 2.69898410e+00, 2.77569645e+00, 2.84441570e+00, 3.00641650e+00, 3.09095256e+00, 3.25946384e+00, 3.32267799e+00,
            3.41985891e+00, 3.53974733e+00, 3.73089764e+00, 3.77749529e+00, 3.85771023e+00, 3.94487842e+00, 4.02374365e+00, 4.15973272e+00,
            4.23202111e+00, 4.27523681e+00, 4.32764722e+00, 4.45315913e+00, 4.63170724e+00, 4.73562630e+00, 4.87578822e+00, 5.02187188e+00,
            5.30576911e+00, 5.54277570e+00, 5.74057786e+00, 5.86234506e+00, 5.94430639e+00, 6.16940193e+00, 6.31678020e+00, 6.48299995e+00,
            6.71925322e+00, 6.92426241e+00, 7.08451859e+00, 7.27995076e+00, 7.42358938e+00, 7.58155233e+00, 7.86704526e+00, 8.07966196e+00,
            8.26044385e+00, 8.47139000e+00, 8.71834394e+00, 9.20656807e+00, 9.47371201e+00, 9.79059038e+00, 1.01079912e+01, 1.05716042e+01,
            1.10213497e+01, 1.13572536e+01, 1.19422608e+01, 1.24944895e+01, 1.32008214e+01, 1.46143549e+01, 1.51727804e+01, 1.59697022e+01,
            1.72187516e+01, 1.94394457e+01, 2.20011487e+01, 3.10691747e+01 };

    std::vector<double> q3_1000
        = { 0.307328,    0.35826137,  0.39490414,  0.44256609,  0.5269023,   0.57991567,  0.62953572,  0.69894629,  0.74816381,  0.79369707,
            0.85012073,  0.89622795,  0.95704242,  1.04154658,  1.09617745,  1.15765993,  1.21822357,  1.27309287,  1.30985927,  1.39651638,
            1.47330363,  1.52930273,  1.6084918,   1.67019175,  1.73598911,  1.8219425,   1.91002081,  1.95014689,  1.98164613,  2.05055251,
            2.15944422,  2.31100001,  2.42993508,  2.50796522,  2.61241923,  2.6989841,   2.77569645,  2.8444157,   3.0064165,   3.09095256,
            3.25946384,  3.32267799,  3.41985891,  3.53974733,  3.73089764,  3.77749529,  3.85771023,  3.94487842,  4.02374365,  4.15973272,
            4.23202111,  4.27523681,  4.32764722,  4.45315913,  4.63170724,  4.7356263,   4.87578822,  5.02187188,  5.30576911,  5.5427757,
            5.74057786,  5.86234506,  5.94430639,  6.16940193,  6.3167802,   6.48299995,  6.71925322,  6.92426241,  7.08451859,  7.27995076,
            7.42358938,  7.58155233,  7.86704526,  8.07966196,  8.26044385,  8.47139,     8.71834394,  9.20656807,  9.47371201,  9.79059038,
            10.10799116, 10.57160419, 11.02134969, 11.35725358, 11.94226075, 12.49448953, 13.20082143, 14.61435494, 15.17278042, 15.96970221,
            17.21875159, 19.43944569, 22.00114866, 31.06917471, 31.06917471, 31.06917471, 31.06917471, 31.06917471, 31.06917471, 31.06917471,
            31.06917471 };

    // precalculated quantilies as there is no numpy
    Data testdata[]
        = { //
            { 50,
              50,
              1e-6,
              // points
              { 1.9379531639030472, 0.5733701214981697,  2.8007097830224903, 1.0979187832601658,   2.609017170741904,   4.150337560812087,
                1.4083770893811094, 0.5041274419638779,  0.9710019586004041, 1.8911463138412057,   1.6709652363701848,  3.0913367033300734,
                11.142620829411575, 10.959087500671917,  1.6368496314613694, 13.34937523885101,    0.14348323632062251, 2.678090089297044,
                0.2543446451732058, 1.43347083251267,    7.625401659196631,  0.7284870008420681,   3.4322898524298653,  3.0074240815884323,
                4.835976112763145,  8.026873403359318,   2.063053292034052,  7.538604918657382,    3.2660147383700693,  7.468440204499453,
                2.3632840358431473, 10.124948142380376,  3.0270877394864164, 7.205739635942679,    3.2691293629669484,  2.170482488277786,
                10.084784992276207, 0.34144257002395234, 22.129106805894132, 0.8385771250992191,   6.357001055418275,   0.966491820342732,
                4.790039775288968,  4.5099801605821215,  8.771771803196557,  0.027808795092585874, 0.730516616522672,   15.754795940621499,
                2.085112871469945,  2.6479778916610144 },
              // q1
              { 0.0278088,   0.08448927,  0.14116975,  0.1955881,  0.24991019,  0.29353871,  0.33621669,  0.41139706,  0.49111265,  0.53251694,
                0.56644585,  0.6338657,   0.70987298,  0.72923796, 0.73023247,  0.76833779,  0.82128744,  0.88078897,  0.94346718,  0.96788996,
                0.97009993,  1.00780784,  1.06999708,  1.18174253, 1.3338671,   1.41465053,  1.42694646,  1.48024796,  1.57990357,  1.64401391,
                1.66073055,  1.71279964,  1.82068837,  1.89910348, 1.92203883,  1.95671818,  2.01801725,  2.06592104,  2.07673023,  2.09450353,
                2.13633464,  2.18783463,  2.28230739,  2.38048536, 2.50089459,  2.61096521,  2.63005596,  2.64888126,  2.66363623,  2.67931629,
                2.73939994,  2.79948359,  2.89993265,  3.00122265, 3.01646936,  3.02610456,  3.05535728,  3.08683928,  3.16470148,  3.25029372,
                3.26726059,  3.26878675,  3.33113035,  3.41107899, 3.69078703,  4.0426304,   4.27261604,  4.44884092,  4.59959924,  4.73682845,
                4.80382068,  4.82632948,  5.2618631,   6.00716532, 6.57767309,  6.99355499,  7.26878777,  7.39751105,  7.48387644,  7.51825715,
                7.55596427,  7.59849467,  7.69766657,  7.89438773, 8.14605715,  8.51105736,  8.95559365,  9.59897011,  10.08960457, 10.10928451,
                10.20836208, 10.61709036, 10.97377017, 11.0637015, 11.27502609, 12.35633575, 13.44559207, 14.62424821, 15.88228216, 19.00569448,
                22.12910681 },
              // q2
              { 0.0278088,  0.0278088,   0.0278088,   0.0278088,   0.0278088,   0.0278088,   0.0278088,   0.0278088,   0.08448927,  0.14116975,
                0.1955881,  0.24991019,  0.29353871,  0.33621669,  0.41139706,  0.49111265,  0.53251694,  0.56644585,  0.6338657,   0.70987298,
                0.72923796, 0.73023247,  0.76833779,  0.82128744,  0.88078897,  0.94346718,  0.96788996,  0.97009993,  1.00780784,  1.06999708,
                1.18174253, 1.3338671,   1.41465053,  1.42694646,  1.48024796,  1.57990357,  1.64401391,  1.66073055,  1.71279964,  1.82068837,
                1.89910348, 1.92203883,  1.95671818,  2.01801725,  2.06592104,  2.07673023,  2.09450353,  2.13633464,  2.18783463,  2.28230739,
                2.38048536, 2.50089459,  2.61096521,  2.63005596,  2.64888126,  2.66363623,  2.67931629,  2.73939994,  2.79948359,  2.89993265,
                3.00122265, 3.01646936,  3.02610456,  3.05535728,  3.08683928,  3.16470148,  3.25029372,  3.26726059,  3.26878675,  3.33113035,
                3.41107899, 3.69078703,  4.0426304,   4.27261604,  4.44884092,  4.59959924,  4.73682845,  4.80382068,  4.82632948,  5.2618631,
                6.00716532, 6.57767309,  6.99355499,  7.26878777,  7.39751105,  7.48387644,  7.51825715,  7.55596427,  7.59849467,  7.69766657,
                7.89438773, 8.14605715,  8.51105736,  8.95559365,  9.59897011,  10.08960457, 10.10928451, 10.20836208, 10.61709036, 10.97377017,
                11.0637015, 11.27502609, 12.35633575, 13.44559207, 14.62424821, 15.88228216, 19.00569448, 22.12910681 },
              // q3
              { 0.41139706,  0.49111265,  0.53251694,  0.56644585,  0.6338657,   0.70987298,  0.72923796,  0.73023247,  0.76833779,  0.82128744,
                0.88078897,  0.94346718,  0.96788996,  0.97009993,  1.00780784,  1.06999708,  1.18174253,  1.3338671,   1.41465053,  1.42694646,
                1.48024796,  1.57990357,  1.64401391,  1.66073055,  1.71279964,  1.82068837,  1.89910348,  1.92203883,  1.95671818,  2.01801725,
                2.06592104,  2.07673023,  2.09450353,  2.13633464,  2.18783463,  2.28230739,  2.38048536,  2.50089459,  2.61096521,  2.63005596,
                2.64888126,  2.66363623,  2.67931629,  2.73939994,  2.79948359,  2.89993265,  3.00122265,  3.01646936,  3.02610456,  3.05535728,
                3.08683928,  3.16470148,  3.25029372,  3.26726059,  3.26878675,  3.33113035,  3.41107899,  3.69078703,  4.0426304,   4.27261604,
                4.44884092,  4.59959924,  4.73682845,  4.80382068,  4.82632948,  5.2618631,   6.00716532,  6.57767309,  6.99355499,  7.26878777,
                7.39751105,  7.48387644,  7.51825715,  7.55596427,  7.59849467,  7.69766657,  7.89438773,  8.14605715,  8.51105736,  8.95559365,
                9.59897011,  10.08960457, 10.10928451, 10.20836208, 10.61709036, 10.97377017, 11.0637015,  11.27502609, 12.35633575, 13.44559207,
                14.62424821, 15.88228216, 19.00569448, 22.12910681, 22.12910681, 22.12910681, 22.12910681, 22.12910681, 22.12910681, 22.12910681,
                22.12910681 },
              // mean, ...
              4.409844564451036,
              20.234572240699432,
              0.027808795092585874,
              22.129106805894132 },  //
            { 100,
              150,
              1.5,
              // points
              { 0.768335180569212,   6.131921037559027,  12.07287501961936,   6.50987152171385,    2.922035936825397,  4.714003969093923,
                0.7263340417485253,  12.537026969853564, 7.1578654094706495,  1.984373062834572,   8.011988080921496,  0.5684316610519563,
                1.7887360425769963,  1.8470356001755275, 1.1272677192543952,  5.786631041363358,   2.47128820801394,   2.7845712904749567,
                8.36389259803186,    11.861129059501682, 4.973421918778628,   4.968454913022254,   11.69103095230506,  10.849016131727783,
                3.9200558498258364,  1.7259200772428465, 15.34608255751849,   5.3078245605066865,  2.14238461839303,   4.103593674923367,
                8.6663324536672,     1.3440889324389789, 11.816534133336889,  1.5692204752510885,  11.81975718148399,  5.338121832258505,
                3.45953610952949,    2.9490670947311637, 1.9955186521356005,  1.0342806205998105,  11.665437836044463, 5.141955581316302,
                10.937163097851778,  4.659045047191167,  0.9716044239589029,  0.747491544362576,   1.2931176174666295, 7.910058789771119,
                0.4669614673006338,  8.420082797093476,  5.74747013981681,    6.291873809940934,   1.124112374023642,  3.093412639352857,
                0.39294458588079456, 6.792726651722982,  11.058549133042698,  1.1824627674658097,  15.38721221271409,  1.5924647480000453,
                1.0762035055513093,  5.0148267355545855, 13.572511318518245,  0.02021817913349754, 3.0122318038734672, 3.6922658823629186,
                0.2132925233473426,  1.2503767384582198, 4.616217227134719,   1.101245506737955,   3.05503430523996,   0.5779187864205275,
                6.039550379828609,   1.0025609812413465, 9.537740947378994,   2.804140312158273,   1.186263921047313,  5.104950184691806,
                1.5627337230278053,  2.7616350353342316, 0.7067253761095833,  5.896533450895627,   5.004414812901841,  2.3702878579354834,
                3.9738919565563737,  3.4570624395682508, 1.1104129025992064,  6.444843931105307,   1.788339702394522,  5.493720463699685,
                1.7434761918533759,  6.2669610141906755, 2.3196518123070042,  2.2158358347318194,  8.76322958391453,   4.870390337486989,
                13.859133789921964,  0.154060480567667,  3.2308140176648386,  5.865915188308684,   1.532827180318629,  6.869548244586464,
                1.5195684473904683,  3.4086610638967683, 0.42485680591340597, 4.800136811351799,   0.0994526472660107, 17.13885782912462,
                0.8785874437126053,  10.97911416290994,  2.638024200332046,   0.22285945245025052, 3.1243240921108155, 0.933700283586256,
                2.9508802279089963,  11.599851761339254, 8.732696292134879,   18.88588286237708,   18.285810215547695, 9.120932316965975,
                0.07273493791566384, 3.656871075159027,  3.267395313838864,   0.8965269369033233,  2.518010841548001,  2.03665583154112,
                0.07380110328835524, 9.893225658722782,  2.8207919257094525,  7.651091750988523,   11.447953594272565, 8.994318504694064,
                2.183118578843944,   7.51816316172235,   7.942738535676253,   2.3581692396823106,  8.9168717307992,    11.413824838066642,
                6.19327853968606,    9.42093058731416,   0.9280898237257452,  6.955075378149445,   0.7238378525237968, 5.649418062192791,
                7.481815911990455,   7.585584989935941,  2.309244785196074,   12.381400223802714,  5.101613330280654,  0.6210398971581725 },
              // q1
              { 0.02021818,  0.07325736,  0.09893962,  0.18189954,  0.22247678,  0.40730508,  0.46443519,  0.57251112,  0.61759021,  0.71374149,
                0.72608442,  0.75562056,  0.86535717,  0.90820521,  0.93291482,  0.98243922,  1.02920548,  1.08446737,  1.10876277,  1.12509053,
                1.17142376,  1.20485664,  1.28371462,  1.3914684,   1.52964508,  1.56435541,  1.58642124,  1.72995798,  1.77577792,  1.80097895,
                1.94317182,  2.00333472,  2.10855141,  2.18868051,  2.27748574,  2.32542943,  2.36592516,  2.47736215,  2.59241912,  2.76415802,
                2.7963127,   2.82990389,  2.93771401,  2.95517484,  3.0362012,   3.09495821,  3.18182865,  3.27163329,  3.43382978,  3.46150946,
                3.67456848,  3.91777795,  4.03614878,  4.60083852,  4.68432615,  4.79583017,  4.91353875,  4.97307423,  5.00878782,  5.09380254,
                5.11975234,  5.28957897,  5.39724931,  5.62917737,  5.76156806,  5.85402257,  5.94515921,  6.11621803,  6.21685693,  6.28714038,
                6.46435221,  6.73332707,  6.89349584,  7.1112237,   7.4912662,   7.56872953,  7.71324384,  7.933915,    8.08940707,  8.40378764,
                8.67960522,  8.75376426,  8.93081215,  9.07914976,  9.43962024,  9.76880601,  10.86135671, 10.96359227, 11.10118222, 11.43464338,
                11.60641037, 11.68053777, 11.81679198, 11.84333915, 12.09138653, 12.46699493, 13.58397622, 14.64721664, 15.42224513, 17.72380355,
                18.88588286 },
              // q2
              { 0.02021818,  0.02021818,  0.02021818,  0.02021818,  0.02021818,  0.02021818,  0.02021818,  0.02021818,  0.07325736,  0.09893962,
                0.18189954,  0.22247678,  0.40730508,  0.46443519,  0.57251112,  0.61759021,  0.71374149,  0.72608442,  0.75562056,  0.86535717,
                0.90820521,  0.93291482,  0.98243922,  1.02920548,  1.08446737,  1.10876277,  1.12509053,  1.17142376,  1.20485664,  1.28371462,
                1.3914684,   1.52964508,  1.56435541,  1.58642124,  1.72995798,  1.77577792,  1.80097895,  1.94317182,  2.00333472,  2.10855141,
                2.18868051,  2.27748574,  2.32542943,  2.36592516,  2.47736215,  2.59241912,  2.76415802,  2.7963127,   2.82990389,  2.93771401,
                2.95517484,  3.0362012,   3.09495821,  3.18182865,  3.27163329,  3.43382978,  3.46150946,  3.67456848,  3.91777795,  4.03614878,
                4.60083852,  4.68432615,  4.79583017,  4.91353875,  4.97307423,  5.00878782,  5.09380254,  5.11975234,  5.28957897,  5.39724931,
                5.62917737,  5.76156806,  5.85402257,  5.94515921,  6.11621803,  6.21685693,  6.28714038,  6.46435221,  6.73332707,  6.89349584,
                7.1112237,   7.4912662,   7.56872953,  7.71324384,  7.933915,    8.08940707,  8.40378764,  8.67960522,  8.75376426,  8.93081215,
                9.07914976,  9.43962024,  9.76880601,  10.86135671, 10.96359227, 11.10118222, 11.43464338, 11.60641037, 11.68053777, 11.81679198,
                11.84333915, 12.09138653, 12.46699493, 13.58397622, 14.64721664, 15.42224513, 17.72380355, 18.88588286 },
              // q3
              { 0.57251112,  0.61759021,  0.71374149,  0.72608442,  0.75562056,  0.86535717,  0.90820521,  0.93291482,  0.98243922,  1.02920548,
                1.08446737,  1.10876277,  1.12509053,  1.17142376,  1.20485664,  1.28371462,  1.3914684,   1.52964508,  1.56435541,  1.58642124,
                1.72995798,  1.77577792,  1.80097895,  1.94317182,  2.00333472,  2.10855141,  2.18868051,  2.27748574,  2.32542943,  2.36592516,
                2.47736215,  2.59241912,  2.76415802,  2.7963127,   2.82990389,  2.93771401,  2.95517484,  3.0362012,   3.09495821,  3.18182865,
                3.27163329,  3.43382978,  3.46150946,  3.67456848,  3.91777795,  4.03614878,  4.60083852,  4.68432615,  4.79583017,  4.91353875,
                4.97307423,  5.00878782,  5.09380254,  5.11975234,  5.28957897,  5.39724931,  5.62917737,  5.76156806,  5.85402257,  5.94515921,
                6.11621803,  6.21685693,  6.28714038,  6.46435221,  6.73332707,  6.89349584,  7.1112237,   7.4912662,   7.56872953,  7.71324384,
                7.933915,    8.08940707,  8.40378764,  8.67960522,  8.75376426,  8.93081215,  9.07914976,  9.43962024,  9.76880601,  10.86135671,
                10.96359227, 11.10118222, 11.43464338, 11.60641037, 11.68053777, 11.81679198, 11.84333915, 12.09138653, 12.46699493, 13.58397622,
                14.64721664, 15.42224513, 17.72380355, 18.88588286, 18.88588286, 18.88588286, 18.88588286, 18.88588286, 18.88588286, 18.88588286,
                18.88588286 },
              // mean, ...
              5.039531919193038,
              18.11406363715497,
              0.02021817913349754,
              18.88588286237708 },  //
            { 100, 1000, 1, points_1000,
              // q1
              q1_1000,
              // q2
              q2_1000,
              // q3
              q3_1000,
              // mean, ...
              4.959309353526455, 24.139961448031855, 0.001651669923338533, 31.069174711545504 },  //
            { 250, 1000, .5, points_1000,
              // q1
              q1_1000,
              // q2
              q2_1000,
              // q3
              q3_1000,
              // mean, ...
              4.959309353526455, 24.139961448031855, 0.001651669923338533, 31.069174711545504 }
          };

    for (auto& d : testdata) {
        size_t max_bins   = d.max_bins;
        size_t num_points = d.num_points;
        // points = [random.expovariate(1/5) for _ in range(num_points)]
        auto& points(d.points);

        Hist h(max_bins);
        h.update(points);


        std::vector<double> q;
        q.resize(101);
        for (size_t i = 0; i < 101; i++) {
            q[i] = static_cast<double>(i) / 100.;
        }

        auto qs(h.quantiles(q));

        double err_sum = 0;  // avg percent error across samples
        for (size_t i = 0; i < qs.size(); i++) {
            auto b(qs[i]);
            auto b_np(d.q1[i]);
            auto b_np_min(d.q2[i]);
            auto b_np_max(d.q3[i]);

            auto err_denom = b_np_max - b_np_min;
            err_sum += std::abs(b - b_np) / err_denom;
        }

        REQUIRE(err_sum <= d.expected_error);
        REQUIRE(approx(h.mean(), d.mean, 1e-6, 1e-12));
        REQUIRE(approx(h.var(), d.var, 0.5, 1e-12));
        REQUIRE(approx(h.min(), d.min, 1e-6, 1e-12));
        REQUIRE(approx(h.max(), d.max, 1e-6, 1e-12));
        REQUIRE(h.count() == num_points);
    }
}


TEST_CASE("test_density", "StreamhistHistogram") {
    Hist h;
    h.updateValues(1., 2., 2., 3.);
    REQUIRE(about(0.0, h.density(0.0), 1e-10));
    REQUIRE(about(0.0, h.density(0.5), 1e-10));
    REQUIRE(about(0.5, h.density(1.0), 1e-10));
    REQUIRE(about(1.5, h.density(1.5), 1e-10));
    REQUIRE(about(2.0, h.density(2.0), 1e-10));
    REQUIRE(about(1.5, h.density(2.5), 1e-10));
    REQUIRE(about(0.5, h.density(3.0), 1e-10));
    REQUIRE(about(0.0, h.density(3.5), 1e-10));
    REQUIRE(about(0.0, h.density(4.0), 1e-10));
}


TEST_CASE("test_weighted_gap", "StreamhistHistogram") {
    /**
     * Histograms using weighted gaps are less eager to merge bins with large
     * counts. This test builds weighted and non-weighted histograms using samples
     * from a normal distribution. The non-weighted histogram should spend more of
     * its bins capturing the tails of the distribution. With that in mind this
     * test makes sure the bins bracketing the weighted histogram have larger
     * counts than the bins bracketing the non-weighted histogram.
     */
    size_t points = 10000;
    Hist   h1(32, true);
    Hist   h2(32, false);
    for (auto p : make_normal(points)) {
        h1.update(p);
        h2.update(p);
    }
    REQUIRE(h1.bins.front().count + h1.bins.back().count > h2.bins.front().count + h2.bins.back().count);
}


TEST_CASE("test_hist", "StreamhistHistogram") {
    REQUIRE(Hist().empty());
}


TEST_CASE("test_negative_densities", "StreamhistHistogram") {
    size_t points = 10000;
    Hist   h;
    for (auto p : make_normal(points)) {
        h.update(p);
    }

    auto x(utils::linspace(h.min(), h.max(), 100));
    for (auto t : x) {
        REQUIRE(h.pdf(t) >= 0.);
    }
}


TEST_CASE("test_weighted", "StreamhistHistogram") {
    Hist h(3, true);
    h.updateValues(1., 2., 2., 3., 4.);
    REQUIRE(h.total == 5);
}


TEST_CASE("test_missing", "StreamhistHistogram") {
    Hist h(2);
    h.updateValues(1., std::numeric_limits<double>::quiet_NaN(), 1., 4., 6.);
    REQUIRE(h.missing_count == 1);
    REQUIRE(h.bins.size() == 2);
    REQUIRE(h.bins[0].getitem<0>() == 1);
    REQUIRE(h.bins[1].getitem<0>() == 5);
}


TEST_CASE("test_missing_merge", "StreamhistHistogram") {
    Hist h1(8);
    h1.update(std::numeric_limits<double>::quiet_NaN());
    Hist h2(8);
    REQUIRE(h1.merge(h2).empty());

    h1 = Hist();
    h1.update(std::numeric_limits<double>::quiet_NaN());
    h2 = Hist();
    h2.update(std::numeric_limits<double>::quiet_NaN());
    auto merged(Hist().merge(h1.merge(h2)));
    REQUIRE(merged.missing_count == 2);
}


TEST_CASE("test_negative_zero", "StreamhistHistogram") {
    REQUIRE(Hist().update(0.).update(-0.).bins.size() == 1);
}


TEST_CASE("test_freeze", "StreamhistHistogram") {
    size_t points = 100000;
    Hist   h(64, false, 500);
    for (auto p : make_normal(points)) {
        h.update(p);
    }
    REQUIRE(about(h.sum(0), static_cast<double>(points) / 2.0, static_cast<double>(points) / 50.0));
    REQUIRE(about(h.median(), 0, 0.05));
    REQUIRE(about(h.mean(), 0, 0.05));
    REQUIRE(about(h.var(), 1, 0.05));
}


TEST_CASE("test_counts", "StreamhistHistogram") {
    std::vector<double> data = { 605., 760., 610., 615., 605., 780., 605., 905. };
    Hist                h(4, false);
    for (auto p : data) {
        h.update(p);
    }
    size_t n = 0;
    for (auto& b : h.bins) {
        n += b.getitem<1>();
    }
    REQUIRE(data.size() == n);
    REQUIRE(h.total == n);
}


TEST_CASE("test_multi_merge", "StreamhistHistogram") {
    size_t points = 100000;
    auto   data   = make_uniform(points);

    Hist h1;
    for (size_t i = 0; i < points; i += 100) {
        h1 += Hist().update(data.begin() + static_cast<int>(i), data.begin() + static_cast<int>(i) + 100);
    }
    Hist h2;
    h2.update(data);

    auto q1(h1.quantiles(.1, .2, .3, .4, .5, .6, .7, .8, .9));
    auto q2(h2.quantiles(.1, .2, .3, .4, .5, .6, .7, .8, .9));

    REQUIRE(allclose(q1, q2, 1., 0.025));
}


/*TEST_CASE("test_exception", "StreamhistHistogram") {
    Hist().sum(5);
    Hist().update(4.).sum(std::numeric_limits<double>::quiet_NaN());
}*/


TEST_CASE("test_point_density_at_zero", "StreamhistHistogram") {
    Hist h;
    h.update(-1.).update(0.).update(1.);
    REQUIRE(h.density(0.) == 1.);

    h = Hist().update(0.);
    REQUIRE(h.density(0.) == std::numeric_limits<double>::infinity());
}


TEST_CASE("test_sum_edges", "StreamhistHistogram") {
    Hist h;
    h.update(0.).update(10.);
    REQUIRE(h.sum(5.) == 1.);
    REQUIRE(h.sum(0.) == 0.5);
    REQUIRE(h.sum(10.) == 2.);
}


TEST_CASE("test_iterable", "StreamhistHistogram") {
    Hist h;
    for (size_t i = 0; i < 4; i++) {
        h.update(static_cast<double>(i));
    }
    REQUIRE(h.total == 4);


    h = Hist().updateValues(std::vector<double> { 1., 2., 3. }, 4., std::vector<double> { 5., 6. }, 7., 8., std::vector<double> { 9. },
                            std::vector<double> { 10., 11., 12. }, 13., 14., 15.);
    REQUIRE(h.total == 15);
    REQUIRE(h.mean() == 8);
}


/*TEST_CASE("test_print_counts", "StreamhistHistogram") {
    // This is a dummy test to test printing things...
    size_t points = 10000;
    size_t bins   = 25;
    auto   data   = make_normal(points);
    Hist   h;
    h.update(data);
    h.print_counts(bins);
}*/


TEST_CASE("test_median_with_data", "StreamhistHistogram") {
    Hist h;

#include "test_data1.h"

    for (auto v : data) {
        h.update(v);
    }

    REQUIRE(about(h.median(), 0., 0.05));
}
